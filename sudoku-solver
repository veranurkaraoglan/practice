class Solution(object):
    def solveSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: None. Do not return anything, modify board in-place instead.
        """
        def is_valid(r, c, ch):
            # Check row, column and 3x3 square
            for i in range(9):
                if board[r][i] == ch: return False
                if board[i][c] == ch: return False
                if board[3 * (r // 3) + i // 3][3 * (c // 3) + i % 3] == ch: return False
            return True

        def solve():
            for r in range(9):
                for c in range(9):
                    if board[r][c] == '.':
                        for ch in map(str, range(1, 10)):
                            if is_valid(r, c, ch):
                                board[r][c] = ch
                                if solve():
                                    return True
                                board[r][c] = '.'  # backtrack
                        return False  # no valid number found
            return True  # solved

        solve()
